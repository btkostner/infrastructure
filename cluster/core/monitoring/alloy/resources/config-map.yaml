apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy
  namespace: monitoring
  labels:
    app.kubernetes.io/component: config
    app.kubernetes.io/instance: alloy
    app.kubernetes.io/name: alloy
    app.kubernetes.io/part-of: alloy
data:
  config.alloy: |
    logging {
      level  = "info"
      format = "logfmt"
    }

    livedebugging {
      enabled = true
    }

    prometheus.remote_write "default" {
      endpoint {
        url = "http://mimir-gateway/api/v1/push"
      }
    }

    loki.write "default" {
      endpoint {
        url = "http://loki-gateway/loki/api/v1/push"
      }
    }

    mimir.rules.kubernetes "default" {
      address = "http://mimir-gateway"
      tenant_id = "anonymous"
    }

    prometheus.exporter.unix "default" {
      include_exporter_metrics = true
      procfs_path              = "/host/proc"
      sysfs_path	             = "/host/sys"
      rootfs_path	             = "/host/fs"
      udev_data_path           = "/host/udev"
    }

    prometheus.scrape "node" {
      targets         = prometheus.exporter.unix.default.targets
      forward_to      = [prometheus.remote_write.default.receiver]
      scrape_interval = "15s"
      clustering {
        enabled = true
      }
    }

    prometheus.exporter.self "default" {}

    prometheus.scrape "alloy" {
      targets    = prometheus.exporter.self.default.targets
      forward_to = [prometheus.remote_write.default.receiver]
      clustering {
        enabled = true
      }
    }

    prometheus.operator.podmonitors "default" {
      forward_to = [prometheus.remote_write.default.receiver]
    }

    prometheus.operator.servicemonitors "default" {
      forward_to = [prometheus.remote_write.default.receiver]
    }

    local.file_match "node_logs" {
      path_targets = [{
          __path__  = "/var/log/syslog",
          job       = "node/syslog",
          node_name = env("HOSTNAME"),
          cluster   = "btkostner",
      }]
    }

    loki.source.file "node_logs" {
      targets    = local.file_match.node_logs.targets
      forward_to = [loki.write.default.receiver]
    }

    loki.source.kubernetes_events "cluster_events" {
      job_name   = "integrations/kubernetes/eventhandler"
      log_format = "logfmt"
      forward_to = [
        loki.process.cluster_events.receiver,
      ]
    }

    loki.process "cluster_events" {
      forward_to = [loki.write.default.receiver]

      stage.static_labels {
        values = {
          cluster = "btkostner",
        }
      }

      stage.labels {
        values = {
          kubernetes_cluster_events = "job",
        }
      }
    }

    discovery.kubernetes "pod" {
      role = "pod"
      // limit to pods on this node to reduce the amount you need to filter
      selectors {
        role  = "pod"
        field = "spec.nodeName=" + env("HOSTNAME")
      }
    }

    discovery.relabel "pod_logs" {
      targets = discovery.kubernetes.pod.targets

      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        action = "replace"
        target_label = "namespace"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        action = "replace"
        target_label = "pod"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "container"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
        action = "replace"
        target_label = "app"
      }

      rule {
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "job"
        separator = "/"
        replacement = "$1"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "__path__"
        separator = "/"
        replacement = "/var/log/pods/*$1/*.log"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_container_id"]
        action = "replace"
        target_label = "container_runtime"
        regex = "^(\\S+):\\/\\/.+$"
        replacement = "$1"
      }
    }

    loki.source.kubernetes "pod_logs" {
      targets    = discovery.relabel.pod_logs.output
      forward_to = [loki.process.pod_logs.receiver]
    }

    loki.process "pod_logs" {
      stage.static_labels {
        values = {
          cluster = "btkostner",
        }
      }

      forward_to = [loki.write.default.receiver]
    }

    discovery.kubernetes "nodes" {
      role = "node"
    }

    discovery.kubernetes "service" {
      role = "service"
    }

    discovery.kubernetes "endpoint" {
      role = "endpoints"
    }

    discovery.kubernetes "endpointslice" {
      role = "endpointslice"
    }

    discovery.kubernetes "ingress" {
      role = "ingress"
    }
